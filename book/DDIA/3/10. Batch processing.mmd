Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# systems

## service \(online\)

### primary measure

#### response time

## batch processing

### primary measure

#### throughput

### example

#### unix tools

##### philsophy

###### automation

###### rapid prototyping

###### incremental iteration

###### being friendly to experimentation

###### breaking down large projects into manageable chunks

##### uniform interface

###### output of one program to become the input to another one

###### everything is a file descriptor

##### separation of logic and wiring

###### stdin, stdout, stderr

##### limitation

###### single machine

#### MapReduce

##### algorithm

###### read input files and break them up into records

####### input format parser

###### call the mapper function to extract a key and value from each input record

####### custom processing code

####### mapper

####### extract key/value from input record

####### no state/each record handled independently

####### join logic: map\-side join

######## no sorting and no reducer

######## ex

######### broadcast hash join

########## small dataset \(in\-memory/secondary index\) joined with large one\)

######### partitioned hash join

########## inputs to the map\-side join are partitioned in the same way, then the hash join approach can be applied to each partition independently

######### map\-side merge join

########## as partitioned but also sorted

###### sort all of the key\-value pairs by key

####### implicit in MapReduce

###### call the reducer function to iterate over the sorted key\-value pairs

####### custom processing code

####### reducer

######## hot key

######### skew join \(Pig\)

########## sampling job to see hot keys

########## actual job randomly sends record to one of the reducers

########## the other join's input replicated to all reducers

######### sharded join \(Crunch\)

########## hot key is specified

####### collects all the values belonging to the same key and calls the reducer with an iterator over that collection of values

####### join logic: reduce\-side join

##### philosophy

###### Diversity of storage

###### Diversity of processing models

###### Designing for frequent faults

### output

#### search index

#### machine learning systems such as classifiers

### Dataflow engines

#### ex

##### Spark/Flink

#### the whole flow is a job

#### difference

##### no sort if not needed

##### results passed from operator to operator in memory

##### operator can start as soon as input is ready, not all of them

##### fault tolerance

###### MR: just restart job on another machine

###### Spark/Flink/Tez: keep track how data was computed

####### which partition was used

####### which operator was applied

## streams

### something online/offline batch processing
