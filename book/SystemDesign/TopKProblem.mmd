Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# top K

## requirements
> leftSide=`true`


### func

#### topK\(k, startTime, endTime\)

### non\-func

#### scalable

#### HA

#### HP

#### accurate

##### as accurate as we can get

## local

### List\<HeavyHitter\> topK\(String\[\] events, int k\)

### put all events to frequencyTable \(Map\<String, Integer\>\)

### copy all frequencyTable entries to heap \(PriorityQueue\)

### copy heap to the list and return result

## distributed

### solutions

#### load balancer

##### different host process in parallel and reduce results at the end

#### data partitioner

##### processor hosts with their own hitters

##### result is a merge sorted list

### high\-level architecture

#### 1\. api gateway

##### entry point for all the client

##### serialize data to more compact format \(protobuf, avro, etc\)

##### aggregate data on the fly and flush based on either time or size

#### 2\. distributed message system

##### apache kafka with random partitioning

#### 3\. paths

##### fast

###### fast processor

####### create count\-min sketch and aggregate data for short perios of time \(sec\)

####### no need for partition cause memory is no longer a problem

####### data replication is nice to have but not mandatory

####### storage

######## Sql, NoSql

######## stores a list of top k elements for period of time

######## data replication is required

##### slow

###### solutions

####### mapReduce

######## 2 jobs

######### calculate frequence

######### top k

######## save in storage

####### data partitioner \+ mapReduce
