Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# distributed cache

## requirements
> leftSide=`true`


### func

#### api

##### put\(key, value\)

##### get\(key\)

### non\-func

#### scalable

##### scales out together with incresing number of requests and data

##### using sharding

#### HA

##### survives hardware/network failures

##### data replication

###### example leader \- follower

####### put to leader

####### get to both leader and follower

#### highly performant

##### fast put and get

#### else important

##### consistency

###### async replication

####### put to leader but get from follower

##### data exparation

###### passive

####### when client does request

###### active

####### maintanance thread

##### local and remote caches

###### local cache on every cache server

##### security

###### firewall if accessed from an internet

###### data's encription/decription

##### monitoring

###### latency

###### faultes

###### hits/misses

###### cpu/memory utilization

###### network IO

##### logging

###### request

####### who/when/key

###### response

####### status code

##### cache client

##### consistent hashing

###### domino effect

####### cache server dies

####### died cache load is transfered to the next server

####### it could lead to the chain of failures

## 1\. local cache

### data structure

#### hashtable

### eviction algo

#### LRU

#### doubly linked list

### api

#### get

##### is item in cache?

###### no

####### return null

###### yes

####### move item to list head

####### return item

#### put

##### is item in cache?

###### yes

####### set new item value

####### move item to list head

###### no

####### is cache full?

######## no

######### add new item to hashtable

######### add new item to list head

######## yes

######### delete tail item from hashtable

######### delete tail item from list head

######### add new item to hashtable

######### add new item to list head

## 2\. distributed cache

### types

#### dedicated cache cluster

##### cache sharded and in different hosts

##### pros

###### isolated resources

###### used by multiple services

###### flexibility in choosing hardware

#### co\-located cache

##### cache sharded and in the same host

##### pros

###### no extra hardware and operational cost

###### scale together

### choosing a cache host

#### consistent hashing

### cache client

#### responsibility

##### to run hash calculation

##### to rout request to cache host

#### knows about all cache servers

#### all cache clients have the same list of cache servers

#### stores list of servers in sorted order

##### binary search to identify the server O\(logN\)

#### TCP/UDP to talk to servers

#### if server is unavailable then client proceeds as though it is a cache miss

### maintain a list of cache servers

#### 1\. file on the host

#### 2\. file on the shared storage

#### 3\. configuration service

##### discovers the cache host

###### servers registers in the service using heartbeats

##### monitors the cache host health

###### service unregisters when no heartbeats
